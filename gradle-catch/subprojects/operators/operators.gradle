apply plugin: 'cpp'
apply from: "${rootDir}/gradle/platform-config.gradle"
apply from: "${rootDir}/gradle/plugins/catch-plugin.gradle"

// TODO visual studio plugin: one solution file for all projects
model {
    buildTypes {
        release
        debug
        codeCoverage
    }
    components {
        operators(NativeLibrarySpec)

        // Gradle does not support the Catch testing framework natively.
        // To work around this, we create an executable with only the Catch
        // main(), and then link it against a library containing all of the
        // tests (as well as the libraries that are under test). The test
        // driver only contains the Catch main() in order to avoid compiling
        // Catch multiple times (see
        // https://github.com/philsquared/Catch/blob/master/docs/slow-compiles.md).
        operatorsTestDriver(NativeExecutableSpec) {
            sources {
                cpp {
                    source {
                        exclude '.*' // ignore hidden files (thanks, VIM)
                    }
                    lib library: 'catch_testing', linkage: 'api'
                    lib library: 'operators', linkage: 'static'
                    lib library: 'operatorsTestSuite', linkage: 'static'
                }
            }
        }
        operatorsTestSuite(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        exclude '.*' // ignore hidden files (thanks, VIM)
                    }
                    lib library: 'catch_testing', linkage: 'api'
                    lib library: 'operators', linkage: 'api'
                }
            }
        }
    }
    catchTests {
        testDrivers {
            operatorsTestDriver(plugins.catchtest.CatchTestDriver)
        }
        testSuites {
            operatorsTestSuite(plugins.catchtest.CatchTestSuite)
        }
    }
    codeCoverage {
        wholeArchives {
            operators(plugins.catchtest.codecoverage.WholeArchive)
        }
    }
    binaries {
        withType(SharedLibraryBinarySpec) {
            buildable = false // only want static libraries
        }
        all {
            if (toolChain in Gcc) {
                cppCompiler.args '-Wall'
                if (buildType == buildTypes.release) {
                    cppCompiler.args '-O3'
                } else if (buildType == buildTypes.debug
                        || buildType == buildTypes.codeCoverage) {
                    cppCompiler.args '-g', '-O0'
                    if (buildType == buildTypes.codeCoverage) {
                        cppCompiler.args '-fprofile-arcs', '-ftest-coverage'
                        linker.args '-lgcov'
                    }
                }
            }
        }
    }
}
